{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Libraries","metadata":{}},{"cell_type":"code","source":"# Core\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.set(style='darkgrid', font_scale=1.4)\nimport os\nimport random\nfrom glob import glob\nimport wandb\n\n# Pytorch\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.optim.lr_scheduler as lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision\nfrom torchvision import datasets, models, transforms\nfrom torch.nn import functional as F","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:56:08.322794Z","iopub.execute_input":"2023-05-16T05:56:08.323279Z","iopub.status.idle":"2023-05-16T05:56:11.528925Z","shell.execute_reply.started":"2023-05-16T05:56:08.323207Z","shell.execute_reply":"2023-05-16T05:56:11.527877Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"**Reproducibility**","metadata":{}},{"cell_type":"code","source":"# Random seeds\ndef set_seed(seed=0):\n    np.random.seed(seed)\n    random.seed(seed)\n    torch.manual_seed(seed)\nset_seed()","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:56:11.531354Z","iopub.execute_input":"2023-05-16T05:56:11.532120Z","iopub.status.idle":"2023-05-16T05:56:11.539994Z","shell.execute_reply.started":"2023-05-16T05:56:11.532080Z","shell.execute_reply":"2023-05-16T05:56:11.538803Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"**GPU**","metadata":{}},{"cell_type":"code","source":"# Config device\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\ndevice","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:56:11.541891Z","iopub.execute_input":"2023-05-16T05:56:11.542275Z","iopub.status.idle":"2023-05-16T05:56:11.614237Z","shell.execute_reply.started":"2023-05-16T05:56:11.542237Z","shell.execute_reply":"2023-05-16T05:56:11.613247Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"device(type='cuda')"},"metadata":{}}]},{"cell_type":"markdown","source":"# WandB\n\nIf you are new to weights and biases experiment tracking, check out my beginner friendly tutorial here: https://www.kaggle.com/code/samuelcortinhas/weights-biases-tutorial-beginner","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Config\n\nHyper-parameters will be passed to wandb as a dictionary.","metadata":{}},{"cell_type":"code","source":"CFG = dict(\n        batch_size = 16,\n        learning_rate = 0.001,\n        epochs = 100,\n        lin1_size = 128,\n        lin2_size = 128,\n        activation = 'relu',\n        model = 'resnet50'\n)","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:22.017231Z","iopub.execute_input":"2023-05-15T21:42:22.017856Z","iopub.status.idle":"2023-05-15T21:42:22.025132Z","shell.execute_reply.started":"2023-05-15T21:42:22.017802Z","shell.execute_reply":"2023-05-15T21:42:22.024211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_path = '/kaggle/input/btpdataset/train2017'\ntest_path = '/kaggle/input/btpdataset/val2017'\n","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:56:15.140319Z","iopub.execute_input":"2023-05-16T05:56:15.140695Z","iopub.status.idle":"2023-05-16T05:56:15.145484Z","shell.execute_reply.started":"2023-05-16T05:56:15.140663Z","shell.execute_reply":"2023-05-16T05:56:15.144487Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"c ={'a10_face_partial':1,\n 'a12_semi_nudity': 3,\n 'a13_full_nudity': 4,\n 'a19_name_full': 2,\n 'a26_handwriting': 2,\n 'a30_credit_card':4,\n 'a31_passport':4,\n 'a32_drivers_license':4,\n 'a33_student_id':4,\n 'a37_receipt':3,\n 'a38_ticket':3,\n 'a49_phone':4,\n 'a74_address_current_complete':3,\n 'a78_address_home_complete':3,\n 'a90_email':2,\n 'a92_email_content':3,\n 'a97_online_conversation':3,\n 'a103_license_plate_complete':4}\n","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:56:12.849365Z","iopub.execute_input":"2023-05-16T05:56:12.849977Z","iopub.status.idle":"2023-05-16T05:56:12.856670Z","shell.execute_reply.started":"2023-05-16T05:56:12.849941Z","shell.execute_reply":"2023-05-16T05:56:12.855452Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"# Data\n\nExplore class distributions.","metadata":{}},{"cell_type":"code","source":"classes = []\nnum_imgs = []\ntrain_folders = sorted(glob(train_path+'/*'))\nfor path in train_folders:\n    class_name = path.split('/')[-1]\n    classes.append(c[class_name])\n    \n    num = len(glob(path+'/*'))\n    num_imgs.append(num)\n    \nplt.figure(figsize=(15,5))\nsns.barplot(x=classes, y=num_imgs)\nplt.title('Number of images in each class (train)')\nplt.xticks(rotation=90)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:22.045587Z","iopub.execute_input":"2023-05-15T21:42:22.046206Z","iopub.status.idle":"2023-05-15T21:42:24.806228Z","shell.execute_reply.started":"2023-05-15T21:42:22.046171Z","shell.execute_reply":"2023-05-15T21:42:24.805260Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classes","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:24.807681Z","iopub.execute_input":"2023-05-15T21:42:24.808695Z","iopub.status.idle":"2023-05-15T21:42:24.816078Z","shell.execute_reply.started":"2023-05-15T21:42:24.808656Z","shell.execute_reply":"2023-05-15T21:42:24.815103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n# Transforms\n\nNormalisation and data augmentation.","metadata":{}},{"cell_type":"code","source":"normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n\ntrain_transforms = transforms.Compose([\n        transforms.Resize((224,224)),\n        transforms.RandomAffine(degrees=15, translate=(0.1,0.1), scale=(0.8,1.2), shear=5),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        normalize\n    ])\n\ntest_transforms = transforms.Compose([\n        transforms.Resize((224,224)),\n        transforms.ToTensor(),\n        normalize\n    ])","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:24.817618Z","iopub.execute_input":"2023-05-15T21:42:24.818241Z","iopub.status.idle":"2023-05-15T21:42:24.827543Z","shell.execute_reply.started":"2023-05-15T21:42:24.818204Z","shell.execute_reply":"2023-05-15T21:42:24.826331Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Dataset and dataloader\n\nLoad data to model in mini-batches.","metadata":{}},{"cell_type":"code","source":"train_dataset = datasets.ImageFolder(train_path, train_transforms)\ntest_dataset = datasets.ImageFolder(test_path, test_transforms)","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:24.832215Z","iopub.execute_input":"2023-05-15T21:42:24.832588Z","iopub.status.idle":"2023-05-15T21:42:25.537604Z","shell.execute_reply.started":"2023-05-15T21:42:24.832557Z","shell.execute_reply":"2023-05-15T21:42:25.536573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_loader = DataLoader(train_dataset, batch_size=CFG['batch_size'], shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=CFG['batch_size'], shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:25.539085Z","iopub.execute_input":"2023-05-15T21:42:25.539718Z","iopub.status.idle":"2023-05-15T21:42:25.546092Z","shell.execute_reply.started":"2023-05-15T21:42:25.539680Z","shell.execute_reply":"2023-05-15T21:42:25.545058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_loader = DataLoader(train_dataset, batch_size=CFG['batch_size'], shuffle=True)\n\n# Visualise some examples\nplt.figure(figsize=(15,15))\nfor i in range(9):\n    ax = plt.subplot(3,3,i+1)\n    ax.grid(False)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    batch = next(iter(plot_loader))\n    label = int(batch[1].numpy()[0])\n    image = np.transpose(batch[0][0].numpy(), (1, 2, 0))/2.5\n    plt.imshow(image)\n    plt.title(classes[label])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:25.547661Z","iopub.execute_input":"2023-05-15T21:42:25.548523Z","iopub.status.idle":"2023-05-15T21:42:28.789924Z","shell.execute_reply.started":"2023-05-15T21:42:25.548487Z","shell.execute_reply":"2023-05-15T21:42:28.787982Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model\n\nTransfer learning in PyTorch.","metadata":{}},{"cell_type":"code","source":"# Load the ResNet50 model pre-trained on ImageNet\nmodel = models.resnet50(pretrained=True).to(device)\n\n# Freeze the layers of the ResNet50 model\nfor param in model.parameters():\n    param.requires_grad = False\n\n# Add a new classification head to the model\nmodel.fc = nn.Sequential(nn.Linear(2048, CFG['lin1_size']),\n                         nn.ReLU(),\n                         nn.Linear(CFG['lin2_size'], len(classes))).to(device)","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:28.791208Z","iopub.execute_input":"2023-05-15T21:42:28.791595Z","iopub.status.idle":"2023-05-15T21:42:33.066415Z","shell.execute_reply.started":"2023-05-15T21:42:28.791560Z","shell.execute_reply":"2023-05-15T21:42:33.065323Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the loss function and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.AdamW(model.fc.parameters())\n\n# Learning rate scheduler\nscheduler = lr_scheduler.CosineAnnealingLR(optimizer, T_max=CFG['epochs'])","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:33.071343Z","iopub.execute_input":"2023-05-15T21:42:33.073939Z","iopub.status.idle":"2023-05-15T21:42:33.082044Z","shell.execute_reply.started":"2023-05-15T21:42:33.073884Z","shell.execute_reply":"2023-05-15T21:42:33.080761Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Helper functions","metadata":{}},{"cell_type":"code","source":"def train_one_epoch(train_loader, model, criterion, optimizer, scheduler):\n    # Train mode\n    model.train()\n    \n    # Track metrics\n    loss_epoch = 0\n    accuracy_epoch = 0\n    \n    # Loop over minibatches\n    for inputs, labels in train_loader:\n        # Send to device\n        inputs = inputs.to(device)\n        labels = labels.to(device)\n\n        # Forward pass\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n\n        # Backprop\n        loss.backward()\n\n        # Update parameters\n        optimizer.step()\n\n        # Zero gradients\n        optimizer.zero_grad()\n\n        # Track loss\n        loss_epoch += loss.detach().item()\n        \n        # Accuracy\n        _, preds = torch.max(outputs, 1)\n        accuracy_epoch += torch.sum(preds == labels)/inputs.shape[0]\n        \n    # Update learning rate\n    scheduler.step()\n        \n    return loss_epoch/len(train_loader), accuracy_epoch.item()/len(train_loader)","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:33.086797Z","iopub.execute_input":"2023-05-15T21:42:33.090127Z","iopub.status.idle":"2023-05-15T21:42:33.102353Z","shell.execute_reply.started":"2023-05-15T21:42:33.090087Z","shell.execute_reply":"2023-05-15T21:42:33.101295Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output_val = []\ndef evaluate_one_epoch(test_loader, model, criterion):\n    # Eval mode\n    model.eval()\n    \n    # Track metrics\n    loss_epoch = 0\n    accuracy_epoch = 0\n    \n    # Don't update weights\n    with torch.no_grad():\n        # Loop over minibatches\n        for inputs, labels in test_loader:\n            # Send to device\n            inputs = inputs.to(device)\n            labels = labels.to(device)\n            \n            # Forward pass\n            outputs = model(inputs)\n            output_val.append(outputs)\n            loss = criterion(outputs, labels)\n            \n            # Track loss\n            loss_epoch += loss.detach().item()\n            \n            # Accuracy\n            _, preds = torch.max(outputs, 1)\n            accuracy_epoch += torch.sum(preds == labels)/inputs.shape[0]\n    \n    return loss_epoch/len(test_loader), accuracy_epoch.item()/len(test_loader)","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:33.107613Z","iopub.execute_input":"2023-05-15T21:42:33.110813Z","iopub.status.idle":"2023-05-15T21:42:33.123414Z","shell.execute_reply.started":"2023-05-15T21:42:33.110775Z","shell.execute_reply":"2023-05-15T21:42:33.122213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot history\ndef plot_hist(train_loss_hist, test_loss_hist, train_acc_hist, test_acc_hist):    \n    plt.figure(figsize=(15,4))\n    plt.subplot(1,2,1)\n    plt.plot(train_loss_hist, label='Train_Loss')\n    plt.plot(test_loss_hist, label='Test_loss')\n    plt.title('Cross Entropy Loss')\n    plt.legend()\n    \n    plt.subplot(1,2,2)\n    plt.plot(train_acc_hist, label='Train_Accuracy')\n    plt.plot(test_acc_hist, label='Val_Accuracy')\n    plt.title('Accuracy')\n    plt.legend()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:33.128622Z","iopub.execute_input":"2023-05-15T21:42:33.131616Z","iopub.status.idle":"2023-05-15T21:42:33.141470Z","shell.execute_reply.started":"2023-05-15T21:42:33.131577Z","shell.execute_reply":"2023-05-15T21:42:33.140441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Train model","metadata":{}},{"cell_type":"code","source":"def train_model(model, criterion, optimizer, scheduler, train_loader, test_loader, verbose=True):\n    # Initialise outputs\n    train_loss_hist = []\n    test_loss_hist = []\n    train_acc_hist = []\n    test_acc_hist = []\n    \n    # Loop over epochs\n    for epoch in range(CFG['epochs']):\n        # Train\n        train_loss, train_accuracy = train_one_epoch(train_loader, model, criterion, optimizer, scheduler)\n        \n        # Evaluate\n        test_loss, test_accuracy = evaluate_one_epoch(test_loader, model, criterion)\n        \n        # Track metrics\n        train_loss_hist.append(train_loss)\n        test_loss_hist.append(test_loss)\n        train_acc_hist.append(train_accuracy)\n        test_acc_hist.append(test_accuracy)\n        \n        # Log metrics\n       \n        \n        # Print loss\n        if verbose:\n            if (epoch+1)%1==0:\n                print(f'Epoch {epoch+1}/{CFG[\"epochs\"]}, loss {train_loss:.5f}, test_loss {test_loss:.5f}, accuracy {train_accuracy:.5f}, test_accuracy {test_accuracy:.5f}')\n    \n    return train_loss_hist, test_loss_hist, train_acc_hist, test_acc_hist","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:33.143209Z","iopub.execute_input":"2023-05-15T21:42:33.143827Z","iopub.status.idle":"2023-05-15T21:42:33.155594Z","shell.execute_reply.started":"2023-05-15T21:42:33.143789Z","shell.execute_reply":"2023-05-15T21:42:33.154594Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nclass CustomImageDataset(Dataset):\n    def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):\n        self.img_labels = pd.read_csv(annotations_file)\n        self.img_dir = img_dir\n        #self.root_dir - \n        self.transform = transform\n        self.target_transform = target_transform\n\n    def __len__(self):\n        return len(self.img_labels)\n\n    def __getitem__(self, idx):\n        img_path = os.path.join(self.img_dir,'2017_' )\n        image = read_image(img_path)\n        label = self.img_labels.iloc[idx, 1]\n        if self.transform:\n            image = self.transform(image)\n        if self.target_transform:\n            label = self.target_transform(label)\n        return image, label","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:42:33.160515Z","iopub.execute_input":"2023-05-15T21:42:33.161148Z","iopub.status.idle":"2023-05-15T21:42:33.174323Z","shell.execute_reply.started":"2023-05-15T21:42:33.161110Z","shell.execute_reply":"2023-05-15T21:42:33.173201Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train model\n\ntrain_loss_hist, test_loss_hist, train_acc_hist, test_acc_hist = train_model(model, criterion, optimizer, scheduler, train_loader, test_loader, verbose=True)","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2023-05-15T21:46:36.588148Z","iopub.execute_input":"2023-05-15T21:46:36.588551Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Save model\ntorch.save(model.state_dict(), 'resnet.h5')\n\n#\n\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.load_state_dict(torch.load('/kaggle/working/resnet.h5'))\nmodel.eval()\ntest_path = '/kaggle/input/testdata/WhatsApp Image 2023-05-15 at 6.10.02 PM.jpeg'\ntest = datasets.ImageFolder(test_path, test_transforms)\ntestloader = DataLoader(test, batch_size=CFG['batch_size'], shuffle=False)\nclass_ = model(testloader)\nprint('class: ', class_)","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:58:01.456751Z","iopub.execute_input":"2023-05-16T05:58:01.457143Z","iopub.status.idle":"2023-05-16T05:58:01.463329Z","shell.execute_reply.started":"2023-05-16T05:58:01.457109Z","shell.execute_reply":"2023-05-16T05:58:01.462186Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"class: 1\n","output_type":"stream"}]},{"cell_type":"code","source":"import math\n\ndef get_privacy_score(score):\n    e_x = pow(math.e,score)\n    return e_x/(e_x+1)","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:58:03.117031Z","iopub.execute_input":"2023-05-16T05:58:03.117437Z","iopub.status.idle":"2023-05-16T05:58:03.123664Z","shell.execute_reply.started":"2023-05-16T05:58:03.117401Z","shell.execute_reply":"2023-05-16T05:58:03.122279Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"get_privacy_score(class_)","metadata":{"execution":{"iopub.status.busy":"2023-05-16T05:58:33.071179Z","iopub.execute_input":"2023-05-16T05:58:33.071935Z","iopub.status.idle":"2023-05-16T05:58:33.078499Z","shell.execute_reply.started":"2023-05-16T05:58:33.071895Z","shell.execute_reply":"2023-05-16T05:58:33.077463Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"0.7310585786300049"},"metadata":{}}]},{"cell_type":"markdown","source":"# Evaluation","metadata":{}},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2023-05-15T21:46:27.473311Z","iopub.status.idle":"2023-05-15T21:46:27.474047Z","shell.execute_reply.started":"2023-05-15T21:46:27.473778Z","shell.execute_reply":"2023-05-15T21:46:27.473802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Learning curves**","metadata":{}},{"cell_type":"code","source":"plot_hist(train_loss_hist, test_loss_hist, train_acc_hist, test_acc_hist)","metadata":{"execution":{"iopub.status.busy":"2023-05-15T11:56:47.669412Z","iopub.execute_input":"2023-05-15T11:56:47.670199Z","iopub.status.idle":"2023-05-15T11:56:48.070077Z","shell.execute_reply.started":"2023-05-15T11:56:47.670163Z","shell.execute_reply":"2023-05-15T11:56:48.068995Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Test accuracy breakdown**","metadata":{}},{"cell_type":"code","source":"# Evaluation mode (turn off dropout)\nmodel.eval()\n\nwith torch.no_grad():\n    n_correct=0\n    n_samples=0\n    \n    n_class_correct = [0 for i in range(len(classes))]\n    n_class_sample = [0 for i in range(len(classes))]\n    \n    for inputs, labels in test_loader:\n        # Send to device\n        inputs = inputs.to(device)\n        labels = labels.to(device)\n    \n        # Forward pass\n        outputs = model(inputs)\n        \n        # Predictions\n        _, preds = torch.max(outputs, 1)\n        \n        n_samples += labels.shape[0]\n        n_correct += (preds == labels.data).sum().item()\n        \n        for i in range(CFG['batch_size']):\n            try:\n                label = labels[i].item()\n                pred = preds[i].item()\n            except:\n                break\n            \n            if (label==pred):\n                n_class_correct[label]+=1\n            n_class_sample[label]+=1\n    \n    acc = 100 * n_correct/n_samples\n    print(f'Overall accuracy on test set: {acc:.1f} %')\n    \n    for i in range(len(classes)):\n        print(f'Accuracy of {classes[i]}: {100* n_class_correct[i]/n_class_sample[i]:.1f} %')","metadata":{"execution":{"iopub.status.busy":"2023-05-15T11:56:50.868062Z","iopub.execute_input":"2023-05-15T11:56:50.868663Z","iopub.status.idle":"2023-05-15T11:57:15.445415Z","shell.execute_reply.started":"2023-05-15T11:56:50.868623Z","shell.execute_reply":"2023-05-15T11:57:15.444325Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**References:**\n\n* [Transfer learning with ResNet-50 in PyTorch](https://www.kaggle.com/code/pmigdal/transfer-learning-with-resnet-50-in-pytorch)","metadata":{}}]}
